{"version":3,"file":"static/js/226.e1f20aee.chunk.js","mappings":"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","sources":["webpack://movie-portal/./src/components/InputText/InputText.module.scss?b47a","components/InputText/InputText.tsx","webpack://movie-portal/./src/components/LoginForm/LoginForm.module.scss?1c6d","components/LoginForm/LoginForm.tsx","pages/SignUpPage/SignUpPage.tsx","shared/lib/validation.ts","shared/hooks/useForm.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"coolinput\":\"InputText_coolinput__jDaX6\",\"label\":\"InputText_label__YZ9g5\",\"input\":\"InputText_input__PfG3y\"};","import React, { FC, useId } from 'react';\nimport classes from './InputText.module.scss';\nimport { classNames } from '../../shared/lib/classNames';\n\ninterface InputTextProps {\n  label: string;\n  type: React.HTMLInputTypeAttribute;\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n  name: string; // TODO enum?\n  autoComplete?: React.HTMLInputAutoCompleteAttribute;\n  placeholder?: string;\n  defaultValue?: string;\n  children?: React.ReactNode;\n}\n\nconst InputText: FC<InputTextProps> = (props) => {\n  const { autoComplete, label, onChange, type, placeholder, name, defaultValue, children } = props;\n  const id = useId();\n  return (\n    <div className={classes.coolinput}>\n      <label className={classNames('', {}, [classes.label])} htmlFor={id}>\n        {label}\n      </label>\n      <input\n        className={classNames('', {}, [classes.input])}\n        type={type}\n        id={id}\n        autoComplete={autoComplete}\n        onChange={onChange}\n        placeholder={placeholder}\n        name={name}\n        defaultValue={defaultValue}\n      />\n      {children}\n    </div>\n  );\n};\n\nexport default InputText;\n","// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"LoginForm_loginForm__gILeT\",\"submit\":\"LoginForm_submit__TEhwl\",\"error\":\"LoginForm_error__PK7ro\"};","import React, { FC } from 'react';\nimport classes from './LoginForm.module.scss';\nimport { classNames } from '../../shared/lib/classNames';\nimport InputText from '../InputText/InputText';\n\ninterface SignUpFormProps {\n  handleInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  handleSubmit: (e: React.FormEvent) => void;\n  submitButtonText?: string;\n  errorMessage?: string;\n}\n\nconst LoginForm: FC<SignUpFormProps> = ({\n  handleInputChange,\n  handleSubmit,\n  submitButtonText,\n  errorMessage,\n}) => (\n  <form className={classNames('', {}, [classes.loginForm])} onSubmit={handleSubmit}>\n    <InputText\n      label=\"Login\"\n      name=\"login\"\n      type=\"text\"\n      autoComplete=\"username\"\n      onChange={handleInputChange}\n    />\n    <InputText\n      label=\"Password\"\n      name=\"password\"\n      type=\"password\"\n      autoComplete=\"current-password\"\n      onChange={handleInputChange}\n    >\n      <p className={classes.error}>{errorMessage}</p>\n    </InputText>\n    <input className={classes.submit} type=\"submit\" value={submitButtonText || 'Login'} />\n  </form>\n);\n\nexport default LoginForm;\n","import LoginForm from '../../components/LoginForm/LoginForm';\nimport useFormState from '../../shared/hooks/useForm';\nimport { classNames } from '../../shared/lib/classNames';\n\nconst SignUpPage = () => {\n  const { handleInputChange, handleSubmitRegister, formState } = useFormState();\n  return (\n    <div className={classNames('page-center')}>\n      <LoginForm\n        handleInputChange={handleInputChange}\n        handleSubmit={handleSubmitRegister}\n        submitButtonText=\"Register\"\n        errorMessage={formState.errorMessage}\n      />\n    </div>\n  );\n};\n\nexport default SignUpPage;\n","import { IUser } from '../models/IUser';\n\nconst loginRegex = /^[a-zA-Z0-9]{4,10}$/;\nconst passwordRegex = /^[a-zA-Z0-9@\\$!%*?#]{4,10}$/; // eslint-disable-line\n\nexport const isValidLogin = (login: string) => loginRegex.test(login);\nexport const isValidPassword = (password: string) => passwordRegex.test(password);\n\nexport const checkIsAvilableLogin = (login: string) => {\n  const userDataKeys = Object.keys(localStorage).filter((key) => key.startsWith('userData'));\n  const userDataValues: IUser[] = userDataKeys.map((key) => JSON.parse(localStorage.getItem(key)));\n  const findLogin = userDataValues.some((user) => user.login === login);\n  return !findLogin;\n};\n\nexport const checkIsExistUser = (login: string, password: string) => {\n  const userDataKeys = Object.keys(localStorage).filter((key) => key.startsWith('userData'));\n  const userDataValues: IUser[] = userDataKeys.map((key) => JSON.parse(localStorage.getItem(key)));\n  const findUser = userDataValues.some(\n    (user) => user.login === login && user.password === password\n  );\n  return findUser;\n};\n","import { useState } from 'react';\nimport { useAppDispatch } from './redux';\nimport { loginUser, registerUser } from '../../store/reducers/ActionsUser';\nimport {\n  checkIsAvilableLogin,\n  checkIsExistUser,\n  isValidLogin,\n  isValidPassword,\n} from '../lib/validation';\n\ninterface FormState {\n  login: string;\n  password: string;\n  errorMessage: string;\n}\n\nconst initialFormState: FormState = {\n  login: '',\n  password: '',\n  errorMessage: '',\n};\n\nconst useFormState = () => {\n  const [formState, setFormState] = useState<FormState>(initialFormState);\n  const dispatch = useAppDispatch();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormState((prevFormState) => ({\n      ...prevFormState,\n      [name]: value,\n    }));\n  };\n\n  const validateForm = () => isValidLogin(formState.login) && isValidPassword(formState.password);\n\n  const resetForm = () => {\n    setFormState(initialFormState);\n  };\n\n  const handleSubmitLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    const { login, password } = formState;\n    if (validateForm()) {\n      if (checkIsExistUser(login, password)) {\n        dispatch(loginUser(login, password));\n        resetForm();\n      } else {\n        setFormState({ ...formState, errorMessage: 'Invalid login or password' });\n      }\n    } else {\n      setFormState((prevFormState) => ({\n        ...prevFormState,\n        errorMessage: 'Invalid login or password',\n      }));\n    }\n  };\n\n  const handleSubmitRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    const { login, password } = formState;\n    if (validateForm()) {\n      if (checkIsAvilableLogin(login)) {\n        dispatch(registerUser(login, password));\n        resetForm();\n      } else {\n        setFormState((prevFormState) => ({\n          ...prevFormState,\n          errorMessage: 'This login is already taken',\n        }));\n      }\n    } else {\n      setFormState((prevFormState) => ({\n        ...prevFormState,\n        errorMessage: 'Invalid login or password',\n      }));\n    }\n  };\n\n  return {\n    formState,\n    handleInputChange,\n    handleSubmitLogin,\n    handleSubmitRegister,\n    resetForm,\n  };\n};\n\nexport default useFormState;\n"],"names":["props","autoComplete","label","onChange","type","placeholder","name","defaultValue","children","id","useId","_jsxs","className","classes","_jsx","classNames","htmlFor","_ref","handleInputChange","handleSubmit","submitButtonText","errorMessage","onSubmit","InputText","value","SignUpPage","handleSubmitRegister","formState","useFormState","LoginForm","loginRegex","passwordRegex","initialFormState","login","password","setFormState","useState","dispatch","useAppDispatch","validateForm","isValidLogin","test","resetForm","e","target","prevFormState","handleSubmitLogin","preventDefault","checkIsExistUser","Object","keys","localStorage","filter","key","startsWith","map","JSON","parse","getItem","some","user","loginUser","checkIsAvilableLogin","registerUser"],"sourceRoot":""}